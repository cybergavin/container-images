name: Build and Publish Secure BaseOS Images

on:
  # schedule:
  #   - cron: '0 0 1 * *'  # Runs on the first day of each month
  workflow_dispatch:
  # pull_request:
  #   paths:
  #     - 'baseOS/Dockerfile.**'

jobs:
  discover-dockerfiles:
      runs-on: ubuntu-latest
      outputs:
        files: ${{ steps.list-dockerfiles.outputs.files }}
      steps:
        - name: Checkout Code
          uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1

        - name: Discover Dockerfiles
          id: list-dockerfiles
          run: echo "files=$(jq -R -s -c 'split("\n")[:-1]' <<< "$(ls baseOS/Dockerfile.*)")" >> $GITHUB_OUTPUT
            

  build-test-publish:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: write
    strategy:
      matrix:
        dockerfile: ${{ fromJson(needs.discover-dockerfiles.outputs.files) }}
    needs: discover-dockerfiles

    steps:
      - name: Checkout Code
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1

      # - name: Install Cosign
      #   run: |
      #     curl -Lo cosign https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64
      #     chmod +x cosign
      #     sudo mv cosign /usr/local/bin/

      - name: Extract Base Image Details
        id: extract-info
        run: |
          base_name=$(basename ${{ matrix.dockerfile }} | cut -d. -f2)
          image_name="ghcr.io/cybergavin/${base_name}"
          echo "base_name=${base_name}" >> $GITHUB_ENV
          echo "image_name=${image_name}" >> $GITHUB_ENV

      - name: Fetch Latest BaseOS Version
        id: baseos-version
        run: |
          case "${{ env.base_name }}" in
            amazonlinux)
              base_image="public.ecr.aws/amazonlinux/amazonlinux" ;;
            alpine)
              base_image="alpine" ;;
            wolfi)
              base_image="cgr.dev/chainguard/wolfi-base" ;;
            *)
              echo "Unknown base OS: ${{ env.base_name }}"
              exit 1 ;;
          esac

          version_id=$(docker run --rm $base_image awk -F= '/VERSION_ID/ {gsub(/"/, "", $2); print $2}' /etc/os-release)
          echo "VERSION_ID=$version_id" >> $GITHUB_ENV
          echo "BaseOS Version: $version_id"

      - name: Generate Build Version Tag
        id: version
        run: |
          VERSION_DATE=$(date +'%Y%m')
          BUILD_NUMBER=$(git tag -l "${{ env.VERSION_ID }}-*-*" | grep "$VERSION_DATE" | wc -l)
          BUILD_NUMBER=$(printf "%02d" $((BUILD_NUMBER + 1)))
          VERSION_TAG="${{ env.VERSION_ID }}-${BUILD_NUMBER}-${VERSION_DATE}"
          echo "VERSION_TAG=${VERSION_TAG}" >> $GITHUB_ENV
          echo "Generated Tag: $VERSION_TAG"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}
      
      - name: Build Secure Image
        run: |
          docker build --no-cache -t ${{ env.image_name }}:${{ env.VERSION_TAG }} --build-arg VERSION_ID="${{ env.VERSION_ID }}" -f ${{ matrix.dockerfile }} .
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@6c175e9c4083a92bbca2f9724c8a5e33bc2d97a5 # v0.30.0
        with:
          image-ref: ${{ env.image_name }}:${{ env.VERSION_TAG }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Generate and Upload SBOM
        uses: anchore/sbom-action@f325610c9f50a54015d37c8d16cb3b0e2c8f4de0 # v0.18.0
        with:
          image: ${{ env.image_name }}:${{ env.VERSION_TAG }}
          output-file: "sbom.spdx.json"

      - name: Upload SBOM as Artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: sbom-${{ env.base_name }}
          path: sbom.spdx.json

      - name: Push to GHCR
        run: |
          docker tag ${{ env.image_name }}:${{ env.VERSION_TAG }} ${{ env.image_name }}:${{ github.sha }}
          docker push ${{ env.image_name }}:${{ env.VERSION_TAG }}
          docker push ${{ env.image_name }}:${{ github.sha }}     
