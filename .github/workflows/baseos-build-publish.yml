---
# ============================================================================================
# Copyright (c) 2025 Cybergavin (https://github.com/cybergavin/container-images) - MIT License
# See the LICENSE file in the root of this repository for full license details.
# ============================================================================================
# This workflow may be triggered by a schedule or manually, to rebuild and publish baseOS container images
name: Build and Publish BaseOS Images

on:
  workflow_dispatch:
  schedule:
    - cron: '0 10 */14 * *'  # Every fortnight at 10 AM UTC

env:
  DEFAULT_REGISTRY: ghcr.io
  IMAGE_NAMESPACE: ${{ github.repository_owner }}

permissions:
  contents: write
  packages: write      # For pushing test images
  id-token: write      # For cosign OIDC signing
  attestations: write  # For SBOM attachments

jobs:
  # This job discovers all Dockerfiles in the repository and lists them
  # It outputs a JSON array of file paths, which is used by the build-publish
  discover:
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.list.outputs.files }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: List Dockerfiles
        id: list
        run: |
          files=$(find . -mindepth 2 -name Dockerfile | jq -R -s -c 'split("\n")[:-1]')
          echo "files=$files" >> $GITHUB_OUTPUT
  
  # This job builds and publishes the discovered Dockerfiles
  build-publish:
    needs: discover
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dockerfile: ${{ fromJson(needs.discover.outputs.files) }}

    steps:
    # -----------------------------------------------------------------------------------------------
    # 1) Checkout full history (needed for tag logic, SBOM provenance, etc.)
    # -----------------------------------------------------------------------------------------------
      - name: Checkout Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0  # Full history needed for tags and provenance

    # -----------------------------------------------------------------------------------------------
    # 2) Derive variables that later steps will rely on
    # -----------------------------------------------------------------------------------------------
      - name: Set build variables
        shell: bash
        run: |
          set -euo pipefail
          file="${{ matrix.dockerfile }}"
          base=$(basename "$(dirname "$file")")
          image="${{ env.DEFAULT_REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${base}"
          echo "BASE=$base"          >> $GITHUB_ENV
          echo "IMAGE=$image"        >> $GITHUB_ENV

      - name: Set BASE_IMAGE and derive VERSION_ID
        shell: bash
        run: |
          set -euo pipefail
          case "$BASE" in
            amazonlinux) base_img="public.ecr.aws/amazonlinux/amazonlinux:minimal";;
            almalinux)   base_img="almalinux:minimal";;
            alpine)      base_img="alpine";;
            wolfi)       base_img="cgr.dev/chainguard/wolfi-base";;
            *) echo "Unknown base '$BASE'"; exit 1;;
          esac

          if [ "$BASE" = "wolfi" ]; then
            version_id="latest"
          else
            version_id=$(docker run --rm "$base_img" awk -F= '/VERSION_ID/{gsub(/"/,"");print $2}' /etc/os-release)
          fi
          echo "VERSION_ID=$version_id" >> $GITHUB_ENV
          echo "BASE_IMAGE=$base_img" >> $GITHUB_ENV
          echo "::notice:: Using base image $base_img, version $version_id"

      - name: Compute BUILD_TAG
        shell: bash
        run: |
          set -euo pipefail
          DATE=$(date +'%Y.%m')
          count=0
          if tag_list=$(skopeo list-tags "docker://${IMAGE}" 2>/dev/null); then
            matching=$(echo "$tag_list" | jq -r '.Tags[]?' | grep "^${VERSION_ID}-b.*-${DATE}$" || true)
            [ -n "$matching" ] && count=$(echo "$matching" | wc -l)
          fi
          num=$(printf "%02d" $((count + 1)))
          BUILD_TAG=${VERSION_ID}-b${num}-${DATE}
          echo "BUILD_TAG=${BUILD_TAG}" >> $GITHUB_ENV
          echo "LOCAL_IMAGE=${IMAGE}-local:${BUILD_TAG}" >> $GITHUB_ENV
          echo "::notice:: BUILD_TAG=${BUILD_TAG}"

      # -----------------------------------------------------------------------------------------------
      # 3) Build the image **locally only** (no push) so we can test it first
      # -----------------------------------------------------------------------------------------------
      - name: Set up Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@54c9adbab1582c2ef04b2016b760714a4bfde3cf  # v3.1.0
        with:
          dockerfile: ${{ matrix.dockerfile }}
          failure-threshold: error
          ignore: DL3018,DL3059,DL3041,DL3006

      - name: Build (LOCAL ONLY) with Buildx
        id: build_local
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83  # v6.18.0
        env:
          DOCKER_BUILD_SUMMARY: false  # Explicitly disable build reports/artifacts        
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          build-args: BASE_IMAGE=${{ env.BASE_IMAGE }}
          load: true          # Load into docker‑daemon, not pushed
          push: false
          tags: ${{ env.LOCAL_IMAGE }} # Local tag for docker commands

      # -----------------------------------------------------------------------------------------------
      # 4) Runtime tests & Trivy security scan run against the local image
      #    Any failure here will abort the job before the image is published
      # -----------------------------------------------------------------------------------------------
      - name: Functional tests
        shell: bash
        run: |
          set -euo pipefail
          echo "Testing $LOCAL_IMAGE"

          docker run --rm "$LOCAL_IMAGE" echo "Container startup test passed" >/dev/null
          echo "::notice:: Startup check passed"

          # Upgrade prevention check
          case "$BASE" in
            amazonlinux|almalinux)
              ! docker run --rm "$LOCAL_IMAGE" microdnf upgrade -y
            ;;
            alpine|wolfi)
              ! docker run --rm "$LOCAL_IMAGE" apk upgrade
            ;;
          esac
          echo "::notice:: Upgrade test passed"

          # appuser check
          docker run --rm "$LOCAL_IMAGE" id appuser >/dev/null
          echo "::notice:: appuser exists"
          echo "::notice:: ✅ Functional tests passed"

      - name: Trivy scan
        uses: aquasecurity/trivy-action@dc5a429b52fcf669ce959baa2c2dd26090d2a6c4  # v0.32.0
        with:
          image-ref: ${{ env.LOCAL_IMAGE }}
          ignore-unfixed: true
          severity: CRITICAL,HIGH
          vuln-type: os,library
          format: json
          output: trivy-results.json

      - name: Generate Trivy Report
        env:
          REPORT_FILE: ${{ env.BASE }}-TrivyScanReport.md
        shell: bash
        run: |
          set -euo pipefail

          # Get vulnerability counts from Trivy JSON
          CRITICAL=$(jq '.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")' trivy-results.json | wc -l)
          HIGH=$(jq '.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")' trivy-results.json | wc -l)
          MEDIUM=$(jq '.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")' trivy-results.json | wc -l)

          # Get compressed size (sum of LayersData[].Size)
          COMPRESSED=$(skopeo inspect "docker-daemon:${LOCAL_IMAGE}" | jq '[.LayersData[].Size] | add' | numfmt --to=iec --suffix=B)
          {
            echo "## 🔍 Trivy Security Scan Results"
            echo ""    
            echo "### Image: ${{ env.IMAGE }}:${{ env.BUILD_TAG }}"
            echo "### 📦 Compressed Image Size: $COMPRESSED"
            echo ""         
            echo "| Severity | Count |"
            echo "|----------|-------|"
            echo "| 🔴 Critical | $CRITICAL |"
            echo "| 🟠 High     | $HIGH     |"
            echo "| 🟡 Medium   | $MEDIUM   |"
            echo ""
          } | tee -a "$GITHUB_STEP_SUMMARY" "$REPORT_FILE" > /dev/null
          echo "REPORT_FILE=${BASE}-TrivyScanReport.md" >> "$GITHUB_ENV"

          # Exit if any critical or high vulnerabilities
          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
            echo "::error title=Trivy scan failed::Found $CRITICAL CRITICAL and $HIGH HIGH vulnerabilities"
            exit 1
          else
            echo "::notice:: No critical or high vulnerabilities found"
          fi

      - name: Upload Build Report Artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ env.BASE }}-build-report
          path: ${{ env.REPORT_FILE }}

      # -----------------------------------------------------------------------------------------------
      # 5) Login, push, generate SBOM & provenance  **only if all previous steps succeeded**
      # -----------------------------------------------------------------------------------------------
      - uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772  # v3.4.0
        with:
          registry: ${{ env.DEFAULT_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Re-build & PUSH image with SBOM + provenance
        id: push_remote
        if: success()     # <-- guard: only runs if every previous step succeeded
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83  # v6.18.0
        env:
          DOCKER_BUILD_SUMMARY: false  # Explicitly disable build reports/artifacts        
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          build-args: BASE_IMAGE=${{ env.BASE_IMAGE }}
          push: true
          tags: |
            ${{ env.IMAGE }}:${{ env.BUILD_TAG }}
            ${{ env.IMAGE }}:latest
          sbom: true
          provenance: mode=max
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # -----------------------------------------------------------------------------------------------
      # 6) Cosign sign & verify the **remote** image
      # -----------------------------------------------------------------------------------------------
      - name: Install Cosign
        uses: sigstore/cosign-installer@398d4b0eeef1380460a10c8013a76f728fb906ac # v3.9.1

      - name: Cosign sign & verify
        if: success()     # runs only if image pushed
        env:
          COSIGN_EXPERIMENTAL: 1
          DIGEST: ${{ steps.push_remote.outputs.digest }}
        shell: bash
        run: |
          set -euo pipefail
          ref="${{ env.IMAGE }}@${DIGEST}"

          echo "🔐 Signing $ref"
          cosign sign --yes "$ref"

          echo "🔍 Verifying signature and attestations"
          cosign verify "$ref" \
            --certificate-identity-regexp="^https://github.com/${{ github.repository }}/" \
            --certificate-oidc-issuer=https://token.actions.githubusercontent.com
          echo "::notice:: ✅ Image signed & verified successfully"

      # -----------------------------------------------------------------------------------------------
      # 7) Extract and upload attestation artifacts (SBOM and provenance)
      # -----------------------------------------------------------------------------------------------
      - name: Extract attestations
        env:
          DIGEST: ${{ steps.push_remote.outputs.digest }}
        shell: bash      
        run: |
          set -euo pipefail
          mkdir -p ./attestations
          ref="${{ env.IMAGE }}@${DIGEST}"
          
          # Extract SBOM
          docker buildx imagetools inspect $ref \
          --format "{{ json .SBOM }}" > ./attestations/sbom-${{ env.BASE }}-${{ env.BUILD_TAG }}.spdx.json

          # Extract Provenance
          docker buildx imagetools inspect $ref \
            --format "{{ json .Provenance }}" > ./attestations/provenance-${{ env.BASE }}-${{ env.BUILD_TAG }}.json

      - name: Upload attestations
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: attestations-${{ env.BASE }}-${{ env.BUILD_TAG }}
          path: ./attestations/
